{"ast":null,"code":"import _asyncToGenerator from \"/Users/mohammadomari/Desktop/the latest tmatem/tmatem/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './login.component';\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [LoginComponent],\n      imports: [ReactiveFormsModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should have a valid loginForm initially', () => {\n    expect(component.loginForm.valid).toBeFalsy();\n  });\n  it('should have email and password controls', () => {\n    expect(component.loginForm.contains('email')).toBeTruthy();\n    expect(component.loginForm.contains('password')).toBeTruthy();\n  });\n  it('should mark email control as invalid if empty', () => {\n    const emailControl = component.loginForm.get('email');\n    expect(emailControl === null || emailControl === void 0 ? void 0 : emailControl.valid).toBeFalsy();\n  });\n  it('should mark email control as valid if input is valid email', () => {\n    const emailControl = component.loginForm.get('email');\n    emailControl === null || emailControl === void 0 ? void 0 : emailControl.setValue('test@example.com');\n    expect(emailControl === null || emailControl === void 0 ? void 0 : emailControl.valid).toBeTruthy();\n  });\n  it('should mark password control as valid if input is valid', () => {\n    const passwordControl = component.loginForm.get('password');\n    passwordControl === null || passwordControl === void 0 ? void 0 : passwordControl.setValue('ValidPassword123');\n    expect(passwordControl === null || passwordControl === void 0 ? void 0 : passwordControl.valid).toBeTruthy();\n  });\n  it('should log form values when login() is called and form is valid', () => {\n    spyOn(console, 'log'); // Spy on console.log\n\n    const email = 'test@example.com';\n    const password = 'ValidPassword123';\n    component.loginForm.patchValue({\n      email: email,\n      password: password\n    });\n    component.login();\n    expect(console.log).toHaveBeenCalledWith('Form submitted successfully');\n    expect(console.log).toHaveBeenCalledWith('Email:', email);\n    expect(console.log).toHaveBeenCalledWith('Password:', password);\n  });\n  it('should reset form when resetForm() is called', () => {\n    const email = 'test@example.com';\n    const password = 'ValidPassword123';\n    component.loginForm.patchValue({\n      email: email,\n      password: password\n    });\n    component.resetFrom();\n    expect(component.loginForm.value).toEqual({\n      email: null,\n      password: null\n    });\n  });\n});","map":{"version":3,"sources":["/Users/mohammadomari/Desktop/the latest tmatem/tmatem/src/app/login/login.component.spec.ts"],"names":["TestBed","ReactiveFormsModule","LoginComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","loginForm","valid","toBeFalsy","contains","emailControl","get","setValue","passwordControl","spyOn","console","email","password","patchValue","login","log","toHaveBeenCalledWith","resetFrom","value","toEqual"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './login.component';\ndescribe('LoginComponent', () => {\n    let component;\n    let fixture;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [LoginComponent],\n            imports: [ReactiveFormsModule]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(LoginComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('should have a valid loginForm initially', () => {\n        expect(component.loginForm.valid).toBeFalsy();\n    });\n    it('should have email and password controls', () => {\n        expect(component.loginForm.contains('email')).toBeTruthy();\n        expect(component.loginForm.contains('password')).toBeTruthy();\n    });\n    it('should mark email control as invalid if empty', () => {\n        const emailControl = component.loginForm.get('email');\n        expect(emailControl === null || emailControl === void 0 ? void 0 : emailControl.valid).toBeFalsy();\n    });\n    it('should mark email control as valid if input is valid email', () => {\n        const emailControl = component.loginForm.get('email');\n        emailControl === null || emailControl === void 0 ? void 0 : emailControl.setValue('test@example.com');\n        expect(emailControl === null || emailControl === void 0 ? void 0 : emailControl.valid).toBeTruthy();\n    });\n    it('should mark password control as valid if input is valid', () => {\n        const passwordControl = component.loginForm.get('password');\n        passwordControl === null || passwordControl === void 0 ? void 0 : passwordControl.setValue('ValidPassword123');\n        expect(passwordControl === null || passwordControl === void 0 ? void 0 : passwordControl.valid).toBeTruthy();\n    });\n    it('should log form values when login() is called and form is valid', () => {\n        spyOn(console, 'log'); // Spy on console.log\n        const email = 'test@example.com';\n        const password = 'ValidPassword123';\n        component.loginForm.patchValue({\n            email: email,\n            password: password\n        });\n        component.login();\n        expect(console.log).toHaveBeenCalledWith('Form submitted successfully');\n        expect(console.log).toHaveBeenCalledWith('Email:', email);\n        expect(console.log).toHaveBeenCalledWith('Password:', password);\n    });\n    it('should reset form when resetForm() is called', () => {\n        const email = 'test@example.com';\n        const password = 'ValidPassword123';\n        component.loginForm.patchValue({\n            email: email,\n            password: password\n        });\n        component.resetFrom();\n        expect(component.loginForm.value).toEqual({\n            email: null,\n            password: null\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"module"}